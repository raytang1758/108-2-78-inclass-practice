}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
convert_TaiwanDate2WesternDate <- function(twDate){
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
twDate <-  c("民國108年12月5日","民國98年10月5日")
convert_TaiwanDate2WesternDate(twDate)
SOAR::Remove(weather_next36hours)
system.time(
askSilly_weather2("新北市",today())
)
system.time(
askSilly_weather2("臺北市",today())
)
askSilly_weather2("新北市",today())
askSilly_weather2("臺北市",today())
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
SOAR::Remove(weather_next36hours)
system.time(
askSilly_weather2("新北市",today())
)
system.time(
askSilly_weather2("臺北市",today())
)
askSilly_weather2("新北市",today())
askSilly_weather2("臺北市",today())
if(condition){
body for TRUE condition
if(!require(lubridate)){ # condition: 是否「沒安裝lubridate」？
install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
convert_TaiwanDate2WesternDate <- function(twDate){
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
twDate <-  c("民國108年12月5日","民國98年10月5日")
convert_TaiwanDate2WesternDate(twDate)
convert_TaiwanDate2WesternDate <- function(twDate){
if(!require("stringr")){
install.packages("stringr")
}
if(!require("lubridate")){
install.packages("lubridate")
}
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
# 檢視步驟耗時elapse time
system.time(
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
)
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
askSilly_weather2 <- function(locationInput,dateInput){
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
SOAR::Remove(weather_next36hours)
system.time(
askSilly_weather2("新北市",today())
)
system.time(
askSilly_weather2("臺北市",today())
)
askSilly_weather2("新北市",today())
askSilly_weather2("臺北市",today())
if(condition){
body for TRUE condition
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 之後才執行以下程式
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？w
) {
warning("你所輸入的學號不正確")
}
# n 為偶數
n <- 54
fvalue <- n/2
# n 為奇數
n <- 33
fvalue <- -(n+1)/2
# n 為偶數
n <- 54
fvalue <- n/2
# n 為奇數
n <- 33
fvalue <- -(n+1)/2
# n 為偶數
n <- 54
# n 為偶數
n <- 54
fvalue <- n/2
# n 為奇數
n <- 33
fvalue <- -(n+1)/2
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
(n %% 2)==1 # 表示「奇數」; 或...
as.logical(n %% 2) # 只有0會變F，其他數值都是T
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
i<-2
i<-2
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly(examSubmissionTime$section[[2]],examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]],examSubmissionTime$time[[3]])
studentSequence <- 1:length(examSubmissionTime$section)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
library(magrittr)
list_howEarly %>%
unlist() -> examSubmissionTime$howEarly
pick_56 <- examSubmissionTime$section=="56"
mean(examSubmissionTime$howEarly[pick_56])
median(examSubmissionTime$howEarly[pick_56])
pick_78 <- examSubmissionTime$section=="78"
mean(examSubmissionTime$howEarly[pick_78])
median(examSubmissionTime$howEarly[pick_78])
if(condition A){
readline("請輸入你的成績（整數）： ") -> grade # 單獨執行
if(grade >=90){
print("優")
} else if(grade>=80 & grade<=89){
print("良")
} else if(grade>=70 & grade<=79){
print("尚可")
} else {
print("待加強")
}
if(grade >=90){
print("優")
} else if(grade>=75 & grade<=89){
print("良")
} else if(grade>=70 & grade<=85){
print("尚可")
} else {
print("待加強")
}
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
h <- 2*l*w +
f1 <- function()
f1 <- 2*l*w+
# surface_A
### 1.2 立方體表面積計算機
請寫一個叫做surface_cube的function，它的功能是在你輸入長寬高後能自動回傳表面積的值，比如輸入surface_cube(20,10,15)，執行結果應該出現和你1.1計算出來一樣值。
```{r ans12}
# surface_cube
```
## 2 口罩實名制
以下資料為10個虛擬身分證字號：
```{r data2}
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
```
# surface_cube
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
l <- 20
w <- 10
h <- 15
f1 <- 2*l*w+
# surface_A
l <- 20
w <- 10
h <- 15
f1 <- 2*l*w + 2*l*h + 2*w*h
# surface_A
f1
l <- 20
w <- 10
h <- 15
f1 <- 2*l*w + 2*l*h + 2*w*h
f1 -> surface_A
surface_A
surface_cube <- function(x,y,z){
l <- x
w <- y
h <- z
f1 <- 2*l*w + 2*l*h + 2*w*h
return(f1)
}
# surface_cube
surface_cube <- function(x,y,z){
l <- x
w <- y
h <- z
f1 <- 2*l*w + 2*l*h + 2*w*h
return(f1)
}
surface_cube
20,15,10
surface_cube(20,15,10)
surface_cube
surface_cube <- function(x,y,z){
l <- x
w <- y
h <- z
f1 <- 2*l*w + 2*l*h + 2*w*h
return(f1)
}
surface_cube(20,15,10)
surface_cube
read_csv("https://www.dropbox.com/s/9xzccsvwrnctzul/mask.csv?dl=1") -> Mask
View(Mask)
Mask[[1]]
str(Mask)
Mask[[1]][[1]]
m1[[2]]
Mask[[1]][[1]] -> m1
m1[[2]]
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
str_extract(m1,regex)
str_extract(m1,regex)
Mask[[1]][[1]] -> m1
regex <- "[:graph:]2[0-9]+"
str_extract(m1,regex)
#det <- function(x){
#}
# `1st_odd_or_even`
str_detect(m1,regex) == m1
str_extract(m1,regex) == m1
warning(0)}else{
m1 <- 0 }else{
if(str_extract(m1,regex) == m1){
m1 <- 0 }else{
m1 <- 1
}
# `1st_odd_or_even`
m1 <- 0 }else{
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
m2 <- 1
# `1st_odd_or_even`
m2 <- 0 }else{
if(str_extract(m1,regex) == m1){
m2 <- 0 }else{
m2 <- 1
}
Mask[[1]][[1]] -> m1
regex <- "[:graph:]2[0-9]+"
if(str_extract(m1,regex) == m1,negate=T){
Mask[[1]][[1]] -> m1
regex <- "[:graph:]2[0-9]+"
if(str_detect(m1,regex) == m1,negate=T){
str_detect(m1,regex)
Mask[[1]][[1]] -> m1
regex <- "[:graph:]2[0-9]+"
str_detect(m1,regex)
if(str_detect(m1,regex)){
m2 <- 0 }else{
m2 <- 1
}
# `1st_odd_or_even`
Mask[[1]][[1]] -> m1
regex <- "[:graph:]2[0-9]+"
if(str_detect(m1,regex)){
m2 <- 0 }else{
m2 <- 1
}
# `1st_odd_or_even`
m2
Mask[[1]][[1]] -> m1
regex <- "[:graph:]2[0-9]+"
if(str_detect(m1,regex)){
m2 <- 1}else{
m2 <- 0
}
m2
# `1st_odd_or_even`
Mask[[1]][[1]] -> m1
regex <- "[:graph:]2[0-9]+"
if(str_detect(m1,regex)){
m2 <- 1}else{
m2 <- 0
}
m2 -> `1st_odd_or_even`
`1st_odd_or_even`
data.frame(
weekday = str_c("星期",c("天","一","二","三","四","五","六")),
number = c(1:7)
) -> weekday_chart
d1 <- str_extract(id,regex1)
regex1 <- "[0-9]$"
d1 <- str_extract(id,regex1)
id <- R298765432
id <- 298765432
d1 <- str_extract(id,regex1)
d1
regex1 <- "[0-9]$"
odd_or_even <- function(id){
d1 <- str_extract(id,regex1)
if(as.logical(d1 %% 2)){
m3 <- 1
}else{
m3 <- 0
}
}
#odd_or_even
Mask[[1]][[1]]
regex1 <- "[0-9]$"
odd_or_even <- function(id){
d1 <- str_extract(id,regex1)
if(as.logical(d1 %% 2)){
m3 <- 1
}else{
m3 <- 0
}
}
#odd_or_even
Mask[[1]][[1]] -> m1
regex <- "[:graph:]2[0-9]+"
if(str_detect(m1,regex)){
m2 <- 1}else{
m2 <- 0
}
m2 -> `1st_odd_or_even`
`1st_odd_or_even`
odd_or_even(Mask[[1]][[1]])
odd_or_even(Mask[[1]][[1]])
odd_or_even(Mask$身分證字號[[1]])
d1
regex1 <- "[0-9]$"
odd_or_even <- function(id){
d1 <- str_extract(id,regex1)
d2 <- as.integer(d1)
if(as.logical(d1 %% 2)){
m3 <- 1
}else{
m3 <- 0
}
}
odd_or_even(Mask$身分證字號[[1]])
regex1 <- "[0-9]$"
odd_or_even <- function(id){
d1 <- str_extract(id,regex1)
d2 <- as.integer(d1)
if(as.logical(d2 %% 2)){
m3 <- 1
}else{
m3 <- 0
}
}
odd_or_even(Mask$身分證字號[[1]])
#odd_or_even
odd_or_even(Mask$身分證字號[[1]])
regex1 <- "[0-9]$"
odd_or_even <- function(id){
d1 <- str_extract(id,regex1)
d2 <- as.integer(d1)
if(as.logical(d2 %% 2)){
m3 <- 1
}else{
m3 <- 0
}
return(m3)
}
odd_or_even(Mask$身分證字號[[1]])
#odd_or_even
regex1 <- "[0-9]$"
odd_or_even <- function(id){
d1 <- str_extract(id,regex1)
d2 <- as.integer(d1)
if(as.logical(d2 %% 2)){
m3 <- 0
}else{
m3 <- 1
}
return(m3)
}
odd_or_even(Mask$身分證字號[[1]])
#odd_or_even
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
View(Mask)
list(
year1=一年級不重覆科目名稱（class character）,
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
View(courseStructure)
