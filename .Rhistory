context_picked_split
context_picked_split <- str_split(context_picked,"\\s\\s")
str(context_picked_split)
context_picked_split
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
library(stringr)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
levels(factor2)
sort(
str_sub(char2,1,1)
str_sub(char2,1,1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
Sys.getlocale("LC_COLLATE")
Sys.getlocale("LC_COLLATE")
Sys.getlocale("LC_COLLATE")
Sys.getlocale("LC_COLLATE")
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
View(covid19)
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,c("4","5-9","10-14","15-19","20-24","25-29","30-34","35-39","40-44","45-49" ,"50-54","55-59" ,"60-64","65-69","70+"),
ordered=TRUE
)
covid19$年齡層
levels(covid19$年齡層)
covid19$縣市 <- factor(covid19$縣市,c( "台中市" "台北市"))
covid19$縣市 <- factor(covid19$縣市,c( "台中市","台北市"))
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
levels(covid19$縣市) # 是名稱字串向量
levels(covid19$縣市) # 是名稱字串向量
levels(covid19$縣市) # 是名稱字串向量
table(covid19$確定病例數)
table(covid19$確定病例數)
table(covid19$縣市)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
table(covid19$縣市)
View(covid19)
newLevels <- names(population)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
newLevels <- names(population)
newLevels
table(covid19$縣市)
sort(table(covid19$縣市),decrease=T)
sort(table(covid19$縣市))
sort(table(covid19$縣市))
sort(table(covid19$縣市))
level(sort(table(covid19$縣市)))
levels(sort(table(covid19$縣市)))
levels(covid19$縣市,sort(table(covid19$縣市)))
levels(covid19$縣市 , sort(table(covid19$縣市)))
sort(table(covid19$縣市)) -> a
levels(covid19$縣市 ,a)
sort(table(covid19$縣市)) -> a
levels(covid19$縣市 ,c(a))
sort(table(covid19$縣市)) -> a
factor(covid19$縣市 ,c(a))
sort(table(covid19$縣市)) -> a
factor(covid19$縣市 ,c(a))
table(covid19$縣市)
level(table(covid19$縣市))
levels(table(covid19$縣市))
class(table(covid19$縣市))
sort(table(covid19$縣市)) -> a
name(sort(table(covid19$縣市))) -> a
names(sort(table(covid19$縣市))) -> a
a
names(sort(table(covid19$縣市),increase=T)) -> a
a
names(sort(table(covid19$縣市),decrease=T)) -> a
a
a
a
a
factor(covid19$縣市 ,c(a))
levels(table(covid19$縣市))
class(table(covid19$縣市))
names(sort(table(covid19$縣市),increase=T)) -> a
a
factor(table(covid19$縣市),c(a))
factor(table(covid19$縣市),c(a))
sort(table(covid19$縣市),increase=T))
names(sort(table(covid19$縣市),increase=T)) -> a
a
levels(covid19$`縣市`)
table(covid19$`縣市`)
new<-table(covid19$`縣市`)
new_levels<-sort(new,decreasing = T)
names(new_levels)
levels(covid19$`縣市`)<-names(new_levels)
levels(covid19$`縣市`)
names(new_levels)
names(sort(table(covid19$縣市),decrease=T)) -> a
names(sort(table(covid19$縣市),decrease=T)) -> a
a
names(sort(table(covid19$縣市),decrease=T)) -> a
a
new_levels<-sort(new,decreasing = T)
names(new_levels)
table(covid19$`縣市`)
levels(table(covid19$縣市))
class(table(covid19$縣市))
names(sort(table(covid19$縣市),decreasing=T)) -> a
a
factor(table(covid19$縣市),c(a))
names(sort(table(covid19$縣市),decreasing=T)) -> a
ss <-factor(table(covid19$縣市),c(a))
levels(ss)
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
levels(covid19$縣市) # 是名稱字串向量
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
back_regex <- str_extract_all(twoNames,"段兄(?!弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- str_extract_all(twoNames,"段兄(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex )
pattern
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
mention_duan <- str_extract_all(context_picked_split,"段譽|段兄|段兄弟|段大哥|段相公|段君|及姓段的小子")
back_regex <- "段兄(?!弟)"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
level_names <- levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
startingAges
levels(covid19$年齡層)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
library(stringr)
levels(factor1)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
levels(covid19$年齡層)
str(covid19$年齡層)
level_names <- levels(covid19$年齡層)
level_names
str(covid19$年齡層)
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
newLevels <- names(population)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
newLevels <- names(population)
newLevels
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
levels(covid19$年齡層)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
str(covid19$年齡層)
level_names <- levels(covid19$年齡層)
level_names
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
levels(covid19$年齡層)
str(covid19$年齡層)
level_names <- levels(covid19$年齡層)
level_names
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
factor1
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳")
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳")
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[[2]] <- c("e')
factor1
factor1
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[[2]] <- c("e")
factor1
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
a <- str_extract(levels(factor1),^[0-9]+)
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(6, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
start
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10)
start
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=3) # 每個新間距要2個
middleLevels
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
factor2[[6]] <- "差"
levels(factor2)
factor2
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
factor1[4:6] <- factor2
factor1
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
forcats::fct_c(factor1, factor2)
covid19$性別
factor(covid19$性別)
levels(factor(covid19$性別))
levels(factor(covid19$性別)) <- c("male","female")
levels(factor(covid19$性別)) <- c("male","female")
a <- factor(covid19$性別)
levels(a) <- c("male","female")
levels(a)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
a <- [A-Z][0-9]+[路線]
a <- "[A-Z][0-9]+[路線]"
str_extract(garbageRoutes$route,a)
a <- "[A-Z][0-9]+路線"
str_extract(garbageRoutes$route,a)
a <- "[0-9]+路線"
str_extract(garbageRoutes$route,a)
a <- "[0-9]+"
str_extract(garbageRoutes$route,a)
str(garbageRoutes$route)
str(garbageRoutes$route)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
str(garbageRoutes$route)
View(garbageRoutes)
View(garbageRoutes)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
garbageRoutes
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
a <- "[ABC]路線"
str(garbageRoute$linenam,a)
a <- "[ABC]路線"
str_extract(garbageRoutes$route,a)
a <- "[ABC]路線"
str_extract(garbageRoutes$linename,a)
a <- "[ABC][0-9]+路線"
str_extract(garbageRoutes$linename,a)
a <- "[A-Z]路線"
str_extract(garbageRoutes$linename,a)
a <- "[A-Z]路線|[A-Z][0-9]+路線"
str_extract(garbageRoutes$linename,a)
a <- "[A-Z]路線|[A-Z][0-9]+路線|[金山][0-9]路線"
str_extract(garbageRoutes$linename,a)
levels(str_extract(garbageRoutes$linename,a))
levels(b)
str_extract(garbageRoutes$linename,a) ->b
levels(b)
a <- "[A-Z]路線|[A-Z][0-9]+路線|[金山][0-9]路線"
str_extract(garbageRoutes$linename,a) -> b
b <- factor(b)
levels(b)
a <- "[A-Z]路線|[A-Z][0-9]+路線|[金山][0-9]路線"
str_extract(garbageRoutes$linename,a) -> b
b <- factor(b)
levels(b) -> c
garbageRoutes[[route]] <- c
garbageRoutes[[route]] <- names(c0
garbageRoutes[[route]] <- names(c)
a <- "[A-Z]路線|[A-Z][0-9]+路線|[金山][0-9]路線"
str_extract(garbageRoutes$linename,a) -> b
b <- factor(b)
levels(b) -> c
garbageRoutes[[route]] <- names(c)
```{r}
