demand(1.2)
# p=1.2的需求量
demand()
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand <- # 創造一個物件叫demand
function(p){ # 定義這個物件為函數
q_d <- 10-5*p # 小心是5*p, 不能寫5p
}
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
```{r}
# p=1.2的需求量
demand(1.2)
# p=1.2的需求量
demand(p=1.2)
# p=1.3的需求量
demand(1.3)
demand
# p=1.2的需求量
demand(p=1.2)
demand
q_d <- 10-5*p
demand <- # 創造一個物件叫demand
function(p){
q_d <- 10-5*p
}
# p=1.2的需求量
demand(p=1.2)
demand
# p=1.3的需求量
demand(1.3)
return(q_d)
demand <- # 創造一個物件叫demand
function(p){
q_d <- 10-5*p
return(q_d)
}
# p=1.2的需求量
demand(p=1.2)
demand
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
.Last.value
demand <- # 創造一個物件叫demand
function(p){
q_d <- 10-5*p
return(q_d)
}
# p=1.2的需求量
demand(p=1.2)
demand
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
.Last.value
View(demand)
.Last.value
demand <- # 創造一個物件叫demand
function(p){
q_d <- 10-5*p
return(q_d)
}
# p=1.2的需求量
demand(p=1.2)
demand
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
.Last.value
# p=1.4的需求量
demand(1.4)
.Last.value
demand <- # 創造一個物件叫demand
function(p){
q_d <- 10-5*p
}
# p=1.2的需求量
demand(p=1.2)
demand
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
.Last.value
# p=1.3的需求量
demand(1.3)
.Last.value
4 -> q_d1.2
demand <- # 創造一個物件叫demand
function(p){
q_d <- 10-5*p
}
# p=1.2的需求量
demand(p=1.2)
demand
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
.Last.value
demand(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
demand(1.2) -> q_d1.2 # 相當於
4 -> q_d1.2
q_d1.2
remove(q_d1.2)
demand <- # 創造一個物件叫demand
function(p){
q_d <- 10-5*p
}
# p=1.2的需求量
demand(p=1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
remove(q_d1.2)
demand(1.2) -> q_d1.2 # 相當於
remove(q_d1.2)
sup <-
function(p){qs=0+2p }
sup <-
function(p){qs=0+2*p }
sup <-
function(p){qs=0+2*p }
sup(1)
.Last.value
library(lurbidate)
library(lubridate)
#library(lubridate)
dateInput <- today()
locationInput <- "新北市"
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
#library(lubridate)
dateInput <- today()
locationInput <- "新北市"
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
View(weather_next36hours)
View(weatherAtLocation)
pick_location
weather_next36hours[["cwbopendata"]][["dataset"]][["location"]][["locationName"]]
weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
weatherAtLocation
weatherAtLocation
View(weatherAtLocation)
# 在weatherAtLocation找出符合時間的天氣資訊
weatherAtLocation$elementName[[]1]
# 在weatherAtLocation找出符合時間的天氣資訊
weatherAtLocation$elementName[[1]]
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
weatherAtLocation$elementName[[1]]
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
date
dateInput
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
View(askSilly_weather)
what_time_it_is("Europe/Paris")
now()
class(nt)
now() -> nt
class(nt)
whattime <- ymd_hms(nt)
whattime
whattime <- with_tz(nt, tzone = "UTC")
whattime
skSilly_weather("新北市",today())
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_weather("新北市",today())
whatimeisit <- function(tzone){
now() -> nt
whattime <- with_tz(nt, p),
whatimeisit <- function(tzone){
now() -> nt,
whattime <- with_tz(nt, p),\
whattime <- with_tz(nt, p)
whattime <- with_tz(nt, tzone = tzone)
whatimeisit <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
}
what_time_is_it <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
returnValue()
}
what_time_it_is("Europe/Paris")
what_time_it_is <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
returnValue()
}
what_time_it_is("Europe/Paris")
whattime <- with_tz(nt, tzone = tzone)
what_time_it_is <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
}
what_time_it_is("Europe/Paris")
what_time_it_is("Europe/Paris")
what_time_it_is <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
}
what_time_it_is("Europe/Paris")
what_time_it_is("Europe/Paris")
.Last.value
what_time_it_is <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
return()
}
what_time_it_is("Europe/Paris")
.Last.value
what_time_it_is("Europe/Paris")
what_time_it_is <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
return()
}
what_time_it_is("Europe/Paris")
what_time_it_is <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
return(tzone)
}
what_time_it_is("Europe/Paris")
what_time_it_is <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
return(tzone)
}
what_time_it_is("Europe/Paris")
what_time_it_is <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
return(what_time_it_is)
}
what_time_it_is("Europe/Paris")
return(whattime)
what_time_it_is <- function(tzone){
now() -> nt
whattime <- with_tz(nt, tzone = tzone)
return(whattime)
}
what_time_it_is("Europe/Paris")
class(demand_return)
class(demand)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand_return # 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand
# 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand
# 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
learning_topics <-
list(
subject="函數",
date=lubridate::ymd("2020-06-03"),
functionsCreated=list(
demand=demand
# 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身。
)
)
learning_topics$functionsCreated$demand(1.2)
.Last.value
typeof(demand_return)
typeof(demand)
environment(demand)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
library(codetools, lib.loc = "C:/Program Files/R/R-3.6.3/library")
install.packages("codetools")
libarary(codetools)
library(codetools)
class(demand)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand)
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand)
# 移除global environment裡的intercept及slope
rm(intercept, slope)
# 移除global environment裡的intercept及slope
rm(intercept)
environment(demand_return)
```{r}
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(demand)
environment(myDemand)
# 移除global environment裡的intercept及slope
rm(intercept)
demand_return(1.2) # 維持正常運作
demand(1.2) # 維持正常運作
.Last.value
myDemand(1.2) # 無法運作
environment(demand)
environment(myDemand)
# 移除global environment裡的intercept及slope
rm(intercept)
demand(1.2) # 維持正常運作
.Last.value
myDemand(1.2) # 無法運作
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
library(glue,lurbidate)
library(glue,lurbidate)
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95/json/preview") -> busArrivalForecast # 公車預估到站時間 https://data.ntpc.gov.tw/datasets/07F7CCB3-ED00-43C4-966D-08E9DAB24E95
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview") -> busRoutes # 公車路線清單 https://data.ntpc.gov.tw/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC/json/preview") -> busStopsInfo # 公車站位資訊 https://data.ntpc.gov.tw/datasets/34B402A8-53D9-483D-9406-24A682C2D6DC
View(busArrivalForecast)
View(busRoutes)
View(busStopsInfo)
View(busRoutes)
View(busRoutes)
busRoutes$nameZh=="route"
rout <- 886
arrive <- function(route,loc)
{
busRoutes$nameZh=="route"
}
rout <- 886
arrive <- function(route,loc)
{
busRoutes$nameZh=="route"
}
rout <- 886
arrive <- function(route,loc)
{
busRoutes$nameZh=="route"
}
busRoutes$nameZh=="route"
jsonlite::fromJSON(	https://data.taipei/api/getDatasetInfo/downloadResource?id=7996eec3-e88a-4abc-b602-42c81932a9f6&rid=a838c175-47e3-483e-bc9e-cd700d229696)
jsonlite::fromJSON(	https://data.taipei/api/getDatasetInfo/downloadResource?id=7996eec3-e88a-4abc-b602-42c81932a9f6&rid=a838c175-47e3-483e-bc9e-cd700d229696)
jsonlite::fromJSON(	https://data.taipei/api/getDatasetInfo/downloadResource?id=7996eec3-e88a-4abc-b602-42c81932a9f6&rid=a838c175-47e3-483e-bc9e-cd700d229696)
jsonlite::fromJSON(	https://data.taipei/api/getDatasetInfo/downloadResource?id=7996eec3-e88a-4abc-b602-42c81932a9f6&rid=a838c175-47e3-483e-bc9e-cd700d229696)
jsonlite::fromJSON(	https://data.taipei/api/getDatasetInfo/downloadResource?id=7996eec3-e88a-4abc-b602-42c81932a9f6&rid=a838c175-47e3-483e-bc9e-cd700d229696)
jsonlite::fromJSON(	https://data.taipei/api/getDatasetInfo/downloadResource?id=7996eec3-e88a-4abc-b602-42c81932a9f6&rid=a838c175-47e3-483e-bc9e-cd700d229696)
jsonlite::fromJSON(https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json)
jsonlite::fromJSON(https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json)
jsonlite::fromJSON(https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json)
jsonlite::fromJSON(https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json) -> ss
jsonlite::fromJSON(https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json) -> ss
jsonlite::fromJSON("https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json") -> ss
View(ss)
jsonlite::fromJSON("https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json") -> ar
jsonlite::fromJSON("https://data.taipei/api/getDatasetInfo/downloadResource?id=7996eec3-e88a-4abc-b602-42c81932a9f6&rid=a838c175-47e3-483e-bc9e-cd700d229696") -> rout1
jsonlite::fromJSON("https://tcgbusfs.blob.core.windows.net/blobbus/GetEstiamteTime.json") -> ar
jsonlite::fromJSON("https://data.taipei/api/getDatasetInfo/downloadResource?id=7996eec3-e88a-4abc-b602-42c81932a9f6&rid=a838c175-47e3-483e-bc9e-cd700d229696") -> rout1
jsonlite::from7z("https://data.taipei/api/getDatasetInfo/downloadResource?id=7996eec3-e88a-4abc-b602-42c81932a9f6&rid=a838c175-47e3-483e-bc9e-cd700d229696") -> rout1
install.packages(magrittr,rvest)
install.packages(magrittr,rvest)
library(magrittr)
detach("package:magrittr", unload = TRUE)
library(magrittr)
install.packages("magrittr")
install.packages(rvest)
library(magrittr)#pipe
library(rvest)
library(magrittr)#pipe
library(rvest)
library(plyr)
rout <- 886
arrive <- function(route,loc)
{
busRoutes$nameZh=="route"
busStopsInfo$nameZh=="loc"
}
rout <- 886
arrive <- function(route,loc)
{
busRoutes$nameZh=="route" -> route2
busStopsInfo$nameZh=="loc" -> loc2
}
rout2
route2
arrive <- function(route,loc)
{
busRoutes$nameZh=="route" -> route2
busStopsInfo$nameZh=="loc" -> loc2
route2
}
.Last.value()
weatherAtLocation
names(route2) -> nr
rout <- 886
arrive <- function(route,loc)
{
busRoutes$nameZh=="route" -> route2
busStopsInfo$nameZh=="loc" -> loc2
names(route2) -> nr
}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
locationInput <- "新北市"
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location # 可挑出locationInput的「要/不要」向量
pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
$# 在weatherAtLocation找出符合時間的天氣資訊
pick_location
