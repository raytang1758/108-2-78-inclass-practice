differentMajors
realEstateRegex <- "(?<=不動)[\u4E00-\u9FFF](?=系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
a <- list(
c=factor(a,b,c),
s=c(wwwww)
)
c=factor("a","b","c"),
a <- list(
c=factor("a","b","c"),
s=c("wwwww)
)
```{r}
a <- list(
c=factor("a","b","c"),
c=c("a","b","c"),
---
title: "Untitled"
author: "tr"
date: "2020/5/15"
output: html_document
---
```{r}
colour <- c('G', 'G', 'R', 'Y', 'G', 'Y', 'Y', 'R', 'Y')
col <- factor(colour)
col1 <- factor(colour, levels = c('G', 'R', 'Y'), labels = c('Green', 'Red', 'Yellow')) #labels的内容替换colour相应位置对应levels的内容
col2 <- factor(colour, levels = c('G', 'R', 'Y'), labels = c('1', '2', '3'))
col_vec <- as.vector(col2) #转换成字符向量
col_num <- as.numeric(col2) #转换成数字向量
col3 <- factor(colour, levels = c('G', 'R'))
class(col3)
```
```{r}
a <- list(
c=c("a","b","c"),
s=c("wwwww)
)
```
---
title: "Untitled"
author: "tr"
date: "2020/5/15"
output: html_document
---
```{r}
colour <- c('G', 'G', 'R', 'Y', 'G', 'Y', 'Y', 'R', 'Y')
col <- factor(colour)
col1 <- factor(colour, levels = c('G', 'R', 'Y'), labels = c('Green', 'Red', 'Yellow')) #labels的内容替换colour相应位置对应levels的内容
col2 <- factor(colour, levels = c('G', 'R', 'Y'), labels = c('1', '2', '3'))
col_vec <- as.vector(col2) #转换成字符向量
col_num <- as.numeric(col2) #转换成数字向量
col3 <- factor(colour, levels = c('G', 'R'))
class(col3)
```
```{r}
a <- list(
c=c("a","b","c"),
s=c("wwwww)
)
```
a
a
a
str(a)
a <- list(
c=c("a","b","c"),
a <- list(
`c`=c("a","b","c"),
`s`=c("wwwww)
)
str(a)
a <- list(
c = c("a","b","c"),
s = c("wwwww)
)
str(a)
a <- list(
c = c("a"),
s = c("wwwww)
)
str(a)
commit <- list(
author = c("Martin老師", "mtlin@gm.ntpu.edu.tw", "2020-03-25T07:17:40Z"),
committer = c("emilyluckey", "emily007@gmail.com", "2020-03-26T08:18:40Z"),
message = c("update")
)
print(commit)
a <- list(
c = c("a"),
s = c("wwwww)
)
str(a)
a <- list(
c = c("a"),
s = c("wwwww")
)
str(a)
as.factor(a)
a <- list(
c = c("a"),
s = c("wwwww")
)
as.factor(a)
averageHeightByGroup <- factor( yearfloor,levels=c("6-8","9-12","13-15"))
# averageHeightByGroup
bus <- "休運系|金融系"
str(differentMajors,bus,"商學院") -> school
bus <- "休運系|金融系"
str(differentMajors,bus,"商學院") -> school
socc <- "經濟系|社會系|社工系"
str(differentMajors,socc,"社科院") -> school
pub <- "公行系|不動系"
str(differentMajors,bus,"公共事務學院") -> school
# school
str(differentMajors)
bus <- "休運系|金融系"
str_replace_all(differentMajors,bus,"商學院") -> school
socc <- "經濟系|社會系|社工系"
str_replace_all(differentMajors,socc,"社科院") -> school
pub <- "公行系|不動系"
str_replace_all(differentMajors,bus,"公共事務學院") -> school
str(school)
# school
bus <- "休運系|金融系"
str_replace_all(differentMajors,bus,"商學院") -> school
socc <- "經濟系|社會系|社工系"
str_replace_all(differentMajors,socc,"社科院") -> school
pub <- "公行系|不動系"
str_replace_all(differentMajors,bus,"公共事務學院") -> school
str(school)
# school
as.factor(differentMajors) -> differentMajors
levels(differentMajors)
soc <- "社會系|社會學系"
socw <- "社工系|社會工作學系"
lex <- "休閒與運動管理學系|休運系"
fin <- "金融系|金融與合作經營學系|金融與合作學系"
eco <- "經濟系|經濟學系"
pol <- "公共行政系|公共行政暨政策學系|公行系"
dm <- "不動系|不動產城鄉學系|不動產與城鄉環境學系"
str_replace_all(currentLevels,soc,"社會系") -> currentLevels
str_replace_all(currentLevels,socw,"社工系") -> currentLevels
str_replace_all(currentLevels,lex,"休運系") -> currentLevels
str_replace_all(currentLevels,fin,"金融系") -> currentLevels
str_replace_all(currentLevels,eco,"經濟系") -> currentLevels
str_replace_all(currentLevels,pol,"公行系") -> currentLevels
str_replace_all(currentLevels,dm,"不動系") -> currentLevels
currentLevels
levels(differentMajors) <- currentLevels
differentMajors
levels(differentMajors)
str_replace_all(currentLevels,dm,"不動系") -> currentLevels
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
differentMajors
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
differentMajors
realEstateRegex <- "(?<=不動)[\u4E00-\u9FFF](?=系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- "(?<=不動)[\u4E00-\u9FFF](?=系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- "(?<=不動)[\u4E00-\u9FFF](?=系)"
realEstateRegex
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
realEstateRegex <- "(?<=不動)[\u4E00-\u9FFF](?=系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
as.factor(differentMajors) -> facdif
levels(facdif) -> currentLevels
as.character(currentLevels) -> currentLevels
currentLevels
bSchoolRegex <- "(休閒與運動管理學系|休運系|金融與合作經營學系|金融與合作學系|金融系)"
bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
as.factor(differentMajors) -> differentMajors
levels(differentMajors)
soc <- "社會系|社會學系"
socw <- "社工系|社會工作學系"
lex <- "休閒與運動管理學系|休運系"
fin <- "金融系|金融與合作經營學系|金融與合作學系"
eco <- "經濟系|經濟學系"
pol <- "公共行政系|公共行政暨政策學系|公行系"
dm <- "不動系|不動產城鄉學系|不動產與城鄉環境學系"
str_replace_all(currentLevels,soc,"社會系") -> currentLevels
str_replace_all(currentLevels,socw,"社工系") -> currentLevels
str_replace_all(currentLevels,lex,"休運系") -> currentLevels
str_replace_all(currentLevels,fin,"金融系") -> currentLevels
str_replace_all(currentLevels,eco,"經濟系") -> currentLevels
str_replace_all(currentLevels,pol,"公行系") -> currentLevels
str_replace_all(currentLevels,dm,"不動系") -> currentLevels
currentLevels
levels(differentMajors) <- currentLevels
levels(differentMajors)
differentMajors
bus <- "休運系|金融系"
str_replace_all(differentMajors,bus,"商學院") -> school
socc <- "經濟系|社會系|社工系"
str_replace_all(differentMajors,socc,"社科院") -> school
pub <- "公行系|不動系"
str_replace_all(differentMajors,bus,"公共事務學院") -> school
str(school)
# school
school
bus <- "休運系|金融系"
str_replace_all(differentMajors,bus,"商學院") -> school
socc <- "經濟系|社會系|社工系"
str_replace_all(differentMajors,socc,"社科院") -> school
pub <- "公行系|不動系"
str_replace_all(differentMajors,pub,"公共事務學院") -> school
str(school)
school
bus <- "休運系|金融系"
str_replace_all(differentMajors,bus,"商學院") -> school
school
socc <- "經濟系|社會系|社工系"
str_replace_all(differentMajors,socc,"社科院") -> school
school
str_replace_all(school,socc,"社科院") -> school
school
str_replace_all(school,pub,"公共事務學院") -> school
str(school)
bus <- "休運系|金融系"
str_replace_all(differentMajors,bus,"商學院") -> school
school
socc <- "經濟系|社會系|社工系"
str_replace_all(school,socc,"社科院") -> school
school
pub <- "公行系|不動系"
str_replace_all(school,pub,"公共事務學院") -> school
str(school)
school
bus <- "休運系|金融系"
str_replace_all(differentMajors,bus,"商學院") -> school
school
socc <- "經濟系|社會系|社工系"
str_replace_all(school,socc,"社科院") -> school
school
pub <- "公行系|不動系"
str_replace_all(school,pub,"公共事務學院") -> school
str(school)
school
levels(school)
as.factor(school)
levels(school)
school
realEstateRegex <- "(?<=不動)[\u4E00-\u9FFF](?=系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
differentMajors
realEstateRegex <- "(?<=不動)[\u4E00-\u9FFF](?=系)"
realEstateRegex
realEstateRegex <- "(?<=不動)[\u4E00-\u9FFF]+(?=系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- "(?<=不動)?[\u4E00-\u9FFF]+(?=系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- "(?<=不動)[\u4E00-\u9FFF]+(?=系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- "不動?[\u4E00-\u9FFF]+(?=系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- "不動?[\u4E00-\u9FFF]系?"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- "不動?[\u4E00-\u9FFF](?=系)"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
realEstateRegex <- "不動?[\u4E00-\u9FFF]+系?"
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
install.packages(purr)
install.packages("purr")
library(purrr)
library(purrr)
pick_小新 <- example$name == "小新"
install.packages("purr")
install.packages("purrr")
install.packages("purrr")
install.packages("purrr")
library(purrr)
pick_小新 <- example$name == "小新"
pick_小新 <- example$name == "小新"
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
library(purrr)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
data_selected
name(data_selected)
names(data_selected)
str(pick_小新)
str(pick_小新)
data_selected
jsonlite::fromJSON("https://cloud.culture.tw/frontsite/trans/SearchShowAction.do?method=doFindTypeJ&category=3", simplifyDataFrame = F) -> dance
View(dance)
dance[[2]]
jsonlite::fromJSON("https://cloud.culture.tw/frontsite/trans/SearchShowAction.do?method=doFindTypeJ&category=3", simplifyDataFrame = F) -> dance
map(dance, ~.x$title) ->
list_titles
View(list_titles)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
str(dance[[5]]$showInfo)
# 這個表演第1個場次的訊息
dance[[5]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[5]]$showInfo[[2]]$time
map(dance, ~ .x$time) ->
list_showTimes_dance5
list_showTimes_dance5
map(dance[[5]]$showInfo, ~ .x$time) ->
list_showTimes_dance5
list_showTimes_dance5
map(dance[[5]]$showInfo, ~ .x$time) ->
list_showTimes_dance5
map(dance[[8]]$showInfo,~.x$time)
map(dance[[8]]$showInfo,~.x$地點)
map(dance[[8]]$showInfo,~.x$location)
map(dance[[8]]$showInfo,~.x$time) -> a
map(dance[[8]]$showInfo,~.x$location) -> c
ans <- c(a.c)
map(dance[[8]]$showInfo,~.x$time) -> time
map(dance[[8]]$showInfo,~.x$location) -> location
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
View(weather_next36hours)
location <- weather_next36hours$cwbopendata$dataset$location
location
str(location)
names(location)
names(location)
location
map(weather_next36hours$cwbopendata$dataset$location$locationName,~.x)
location
map(weather_next36hours$cwbopendata$dataset$location$locationName,~.x)
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$elementName
max(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$elementName)
map(weather_next36hours$cwbopendata$dataset$location$locationName,~.x)
max(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$elementName)
max(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$)
max(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x)
max(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x)
View(dance)
map(dance,.x$showInfo) ->
list_numberOfShows
map(dance,~.x$showInfo) ->
list_numberOfShows
View(list_numberOfShows)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$elementName)
View(weather_next36hours[["cwbopendata"]][["dataset"]][["location"]][["weatherElement"]][[1]])
map(eather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[startTime][[1]])
map(eather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$time[[startTime][[1]])
map(eather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$time[[startTime][[1]])
map(eather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$time)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$time)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$time[[startTime][[1]])
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$time[[startTime]][[1]])
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$time$startTime[[1]])
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$time$startTime)
map(danceo,~.x$showInfo,~.x$time) -> time
map(dance,~.x$showInfo,~.x$time) -> time
map(dance,~.x$showInfo,~.x$time) -> time
time
map(dance,~.x$showInfo$time) -> time
map(dance,~.x$showInfo$time) -> time
time
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$time~.x[[1]])
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time) -> bas
map(bas[[1]],~.x[[1]])
bas
str(bas)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time) -> bas
View(bas)
weather_next36hours[["cwbopendata"]][["dataset"]][["location"]][["weatherElement"]][[1]][["time"]][[1]][["parameter"]][["parameterValue"]]
weather_next36hours[["cwbopendata"]][["dataset"]][["location"]][["weatherElement"]][[1]][["time"]][[2]][["startTime"]]
weather_next36hours[["cwbopendata"]][["dataset"]][["location"]][["weatherElement"]][[1]][["time"]][[2]][["endTime"]]
map(busRoutes, ~.x$Id) ->Id
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/67BB3C2B-E7D1-43A7-B872-61B2F082E11B?$format=json", simplifyDataFrame = F) ->
busRoutes
map(busRoutes, ~.x$Id) ->Id
map(busRoutes, ~.x$providerId) -> pId
map(busRoutes, ~.x$providerName) -> name
map(busRoutes, ~.x$nameZh) -> nZ
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$startTime
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$startTime[[1]]
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time$time[[1]]$startTime[[1]])
map(bas[[1]],~.x[[1]])
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$time[[1]]$startTime[[1]]
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time$time[[1]]$startTime[[1]])
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$time$time[[1]]$startTime[[1]])
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$startTime[[1]])
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,
~.x$startTime)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time)
install.packages("purrr")
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
library(purrr)
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
pick_小新 <- example$name == "小新"
str(pick_小新)
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
names(data_selected)
jsonlite::fromJSON("https://cloud.culture.tw/frontsite/trans/SearchShowAction.do?method=doFindTypeJ&category=3", simplifyDataFrame = F) -> dance
str(dance[[5]]$showInfo)
map(dance, ~.x$title) ->
list_titles
View(list_titles)
map(dance,~.x$showInfo) ->
list_numberOfShows
View(list_numberOfShows)
# 這個表演第1個場次的訊息
dance[[5]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[5]]$showInfo[[2]]$time
map(dance[[5]]$showInfo, ~ .x$time) ->
list_showTimes_dance5
map(dance,~.x$showInfo$time) -> time
time
map(dance[[8]]$showInfo,~.x$location) -> location
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
map(weather_next36hours$cwbopendata$dataset$location$locationName,~.x)
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$elementName
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/67BB3C2B-E7D1-43A7-B872-61B2F082E11B?$format=json", simplifyDataFrame = F) ->
busRoutes
map(busRoutes, ~.x$Id) ->Id
map(busRoutes, ~.x$providerId) -> pId
map(busRoutes, ~.x$providerName) -> name
map(busRoutes, ~.x$nameZh) -> nZ
str(map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time))
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time) ->a
View(a)
map(
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time),~.x[[1]])
