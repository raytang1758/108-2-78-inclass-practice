s <- table$級分
s
a <- ss
ss
b<-factor(b)
b
s <- table$級分
s
ss  <- s+1
a <- ss
ss
b = table$國文
b
b<-factor(b)
b
example$name[pick_after98|pick_above170]
example$name[pick_after98&pick_above170]
example$name[pick_after98 & pick_above170]
example$name[
pick_after98 & pick_fromTaipeiMetro & pick_bloodB
]
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example$name[
pick_after98 & pick_fromTaipeiMetro & pick_bloodB
]
library(stringr)
install.packages(grin,stringr)
install.packages(glue,stringr)
install.packages(glue,stringr)
install.packages(glue)
library(glue)
install.packages("glue")
ilibrary(stringr)
library(stringr)
library(glue)
str_sub("410873002", 5, 6)
lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
)
lubridate::ymd(
c(
"民國2019年12月05日",
"馬丁2019的12課05muydifícil",
"助教2019Emily12解說05真棒",
"2019R12課程05すごい",
"R程式2019的12期中考05とても変態"
)
)
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
install.packages("htmlwidgets")
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
install.packages("htmlwidgets")
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
str_extract_all(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳list
str_extract(
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
) # 回傳vector
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色") # 檢視
str_count(heartSutra,"色") # 計數
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色不") # 檢視
str_count(heartSutra,"色") # 計數
heartSutra <- c("舍利子，色不異空，空不異色；色即是空，空即是色。")
str_view_all(heartSutra,"色不") # 檢視
str_count(heartSutra,"色") # 計數
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(77|108)")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,[1234])
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"[1234]")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"[1,234]")
str_view_all(studentIds, "107|108") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
Ids <- c("A283743192","acnnn829103720","A10920402","C291022384")
str_view_all(Ids, "["AC"]")
Ids <- c("A283743192","acnnn829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
studentIds <- c("410873029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"[1234]")
str_view_all(studentIds, "(107|108)") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)" # 字群組合strip因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
str_view_all(studentIds, "(107|108)") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
studentIds <- c("410871029","410773005","410772035","410562123")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"[1234]")
str_view_all(studentIds, "(107|108)") # 可不寫()
# 是否來自107或108學屆
str_detect(studentIds, "107|108")
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
# 顯示所有符合規則的
str_view_all(headline, "(謝陳官)") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
str_view_all(headline, "(謝無雙|官求敗)") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙&官求敗")
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙官求敗的策略運算，陳大器的數理資科學，及的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "(謝陳官)") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "(謝無雙|官求敗)") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙&官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
str_count(headline, "謝無雙&官求敗")
# 顯示所有符合規則的
str_view_all(headline, "(謝陳官)") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "(謝無雙|官求敗)") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙&官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
str_detect(adresses,"(1-9)"
str_detect(adresses,"(1-9)")
str_detect(addresses,"(1-9)")
str_detect(addresses,"[1-9]")
str_view_all(addresses,"[1-9]")
str_view_all("[1-9]""[1-9]""[1-9]")
a <- b <- c <- "[1-9]"
d <- "號"
paste0(a,b,c,d) -> g
str_view_all(addresses,"(9)")
a <- b <- c <- "[1-9]"
d <- "號"
paste0(a,b,c,d) -> g
str_view_all(addresses,"(9)")
a <- b <- c <- "[1-9]"
d <- "號"
paste0(a,b,c,d) -> g
str_view_all(addresses,"(g)")
a <- b <- c <- "[1-9]"
d <- "號"
paste0(a,b,c,d) -> g
str_view_all(addresses,"(g)")
a <- b <- c <- "[1-9]"
d <- "號"
paste0(a,b,c,d) -> g
str_detect(addresses,"(g)")
g
str_detect(addresses,"g")
str_view_all(addresses,"g")
strip1 <- strip2 <- strip3 <- "[0-9]"
strip4 <- "號"
myRegexSlotMachine <- paste0(strip1,strip2,strip3,strip4)
print(myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
a <- b <- c <- "[1-9]"
d <- "號"
paste0(a,b,c,d) -> g
g
str_view_all(addresses,g)
Ids <- c("A283743192","ACnnn829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]") # 偵測 出現A、C
str_extract(Ids,"[A-Z]") # 取出 A-Z的字元
Ids <- c("A283743192","ACnnn829103720","A10920402","C291022384")
str_view_all(Ids, AC)
Ids <- c("A283743192","ACnnn829103720","A10920402","C291022384")
str_view_all(Ids, A)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
pattern <- paste0("段(兄|兄弟)",back_regex)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- str_extract(twoNames,"(段兄弟)" )
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- str_extract(twoNames,"(段兄|段兄弟)" )
back_regex
back_regex <- str_extract(twoNames,"(段兄|段兄弟)" )
back_regex
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
View(params)
params[["studentName"]]
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
# 目標是後面的唧唧
target_regex2 <- "唧唧"
pattern <- glue::glue("{target_regex2}$")
print(pattern)
str_view(phrase, pattern)
View(semiGodsSemiDevils)
back_regex <- str_extract(twoNames,"(段兄|段兄弟)" )
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
phrase <- c("唧唧复唧唧")
# 目標是後面的唧唧
target_regex2 <- "唧唧"
pattern <- glue::glue("{target_regex2}$")
print(pattern)
str_view(phrase, pattern)
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段兄弟")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
taraget_regex <- "段兄"
back_regex <- str_extract(twoNames,target_regex(?!expression) )
target_regex <- "段兄"
back_regex <- str_extract(twoNames,target_regex(?!expression) )
target_regex <- "段兄"
back_regex <- glue::gluet(twoNames,target_regex(?!expression) )
target_regex <- "段兄"
back_regex <- glue::glue(twoNames,target_regex(?!expression) )
taraget_regex2 <- "{target_regex}(?!expression)"
back_regex <- glue::glue(twoNames,target_regex2)
back_regex <- glue::glue(twoNames,taraget_regex2)
back_regex
target_regex <- "段兄"
taraget_regex2 <- "{target_regex}(?!expression)"
back_regex <- glue::glue(twoNames,taraget_regex2)
back_regex
taraget_regex <- "段兄"
taraget_regex2 <- "{taraget_regex}(?!expression)"
back_regex <- glue::glue(twoNames,taraget_regex2)
back_regex
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
taraget_regex <- "段兄"
taraget_regex2 <- "段兄"(?=弟)"
taraget_regex2 <- "段兄"!(?=弟)"
taraget_regex2 <- "段兄"(?=弟)"
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
regex_pattern <-  "段兄(?=弟)"
back_regex <- str_extract(twoNames,"regex_pattern ")
back_regex
regex_pattern <-  "段兄(?=弟)"
back_regex <- str_extract(twoNames,"regex_pattern ")
back_regex
regex_pattern <-  "段兄!(?=弟)"
back_regex <- str_extract(twoNames,"regex_pattern ")
back_regex
regex_pattern <-  "{段兄}(?=弟)"
back_regex <- str_extract(twoNames,"regex_pattern ")
back_regex
regex_pattern <-  "{段兄}!(?=弟)"
back_regex <- str_extract(twoNames,"regex_pattern ")
back_regex
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
regex_pattern <-  "{段兄}!(?=弟)"
back_regex <- sstr_extract_all(twoNames,regex_pattern)
regex_pattern <-  "{段兄}!(?=弟)"
back_regex <- str_extract_all(twoNames,regex_pattern)
regex_pattern <-  "{段兄}(?=弟)"
back_regex <- str_extract_all(twoNames,regex_pattern)
regex_pattern <-  ("段兄(?!弟)")
back_regex <- str_extract_all(twoNames,regex_pattern)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- ("段兄(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
regex_pattern <-  ("段兄(?!弟)")
back_regex <- str_extract_all(twoNames,regex_pattern)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- str_extract_all(twoNames,("段兄(?!弟)"))
back_regex
back_regex <- ("段兄(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
back_regex <- ("段兄(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
ragaex_strim <- "((?<=__truncated__ )(..|..|...)+(?= __truncated__ ...))"
str_extract_all(semiGodsSemiDevils$data[[1]]$text, ragaex_strim)
# context_picked
ragaex_strim <- "((?<=__truncated__ )(..|..|...)+(?= __truncated__ ...))"
context_picked <- str_extract_all(semiGodsSemiDevils$data[[1]]$text, ragaex_strim)
context_picked
back_regex <- paste0("段(兄|兄弟)","段兄(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
ragaex_strim <- "((?<=__truncated__ )(..|..|...)+(?= __truncated__ ...))"
context_picked <- str_extract_all(semiGodsSemiDevils$data[[1]]$text, ragaex_strim)
context_picked
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
View(semiGodsSemiDevils)
ragaex_strim <- "((?<=__truncated__ )(..|..|...)+(?= __truncated__ ...))"
context_picked <- str_extract_all(semiGodsSemiDevils$data[[1]]$text, ragaex_strim)
context_picked
