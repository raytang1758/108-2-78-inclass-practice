target_regex <- "段兄"
taraget_regex2 <- "{target_regex}(?!expression)"
back_regex <- glue::glue(twoNames,taraget_regex2)
back_regex
taraget_regex <- "段兄"
taraget_regex2 <- "{taraget_regex}(?!expression)"
back_regex <- glue::glue(twoNames,taraget_regex2)
back_regex
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
taraget_regex <- "段兄"
taraget_regex2 <- "段兄"(?=弟)"
taraget_regex2 <- "段兄"!(?=弟)"
taraget_regex2 <- "段兄"(?=弟)"
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
regex_pattern <-  "段兄(?=弟)"
back_regex <- str_extract(twoNames,"regex_pattern ")
back_regex
regex_pattern <-  "段兄(?=弟)"
back_regex <- str_extract(twoNames,"regex_pattern ")
back_regex
regex_pattern <-  "段兄!(?=弟)"
back_regex <- str_extract(twoNames,"regex_pattern ")
back_regex
regex_pattern <-  "{段兄}(?=弟)"
back_regex <- str_extract(twoNames,"regex_pattern ")
back_regex
regex_pattern <-  "{段兄}!(?=弟)"
back_regex <- str_extract(twoNames,"regex_pattern ")
back_regex
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
regex_pattern <-  "{段兄}!(?=弟)"
back_regex <- sstr_extract_all(twoNames,regex_pattern)
regex_pattern <-  "{段兄}!(?=弟)"
back_regex <- str_extract_all(twoNames,regex_pattern)
regex_pattern <-  "{段兄}(?=弟)"
back_regex <- str_extract_all(twoNames,regex_pattern)
regex_pattern <-  ("段兄(?!弟)")
back_regex <- str_extract_all(twoNames,regex_pattern)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- ("段兄(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
regex_pattern <-  ("段兄(?!弟)")
back_regex <- str_extract_all(twoNames,regex_pattern)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- str_extract_all(twoNames,("段兄(?!弟)"))
back_regex
back_regex <- ("段兄(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
back_regex <- ("段兄(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
ragaex_strim <- "((?<=__truncated__ )(..|..|...)+(?= __truncated__ ...))"
str_extract_all(semiGodsSemiDevils$data[[1]]$text, ragaex_strim)
# context_picked
ragaex_strim <- "((?<=__truncated__ )(..|..|...)+(?= __truncated__ ...))"
context_picked <- str_extract_all(semiGodsSemiDevils$data[[1]]$text, ragaex_strim)
context_picked
back_regex <- paste0("段(兄|兄弟)","段兄(?!弟)")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
ragaex_strim <- "((?<=__truncated__ )(..|..|...)+(?= __truncated__ ...))"
context_picked <- str_extract_all(semiGodsSemiDevils$data[[1]]$text, ragaex_strim)
context_picked
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
View(semiGodsSemiDevils)
ragaex_strim <- "((?<=__truncated__ )(..|..|...)+(?= __truncated__ ...))"
context_picked <- str_extract_all(semiGodsSemiDevils$data[[1]]$text, ragaex_strim)
context_picked
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
#back_regex <- "段兄(?!弟)"
back_regex <- "段兄[^弟]"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)"#,back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)"#,back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)")#,back_regex )
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex )
str_extract_all(twoNames, pattern)
semiGodsSemiDevils$data[[1]]$section[[2]]
semiGodsSemiDevils$data[[1]]$section[[2]]
semiGodsSemiDevils$data[[1]]$section[[3]]
View(semiGodsSemiDevils[[5]][[1]])
View(semiGodsSemiDevils[[5]][[1]])
View(semiGodsSemiDevils[[5]][[1]])
semiGodsSemiDevils$data[[1]]$text
ragaex_strim <- "(?>=第一回)[...]+(?!第二回)""
context_picked <- str_extract_all(semiGodsSemiDevils$data[[1]]$text,ragaex_strim)
context_picked
ragaex_strim <- "(?<=第一回)[...]+(?=第二回)""
context_picked <- str_extract_all(semiGodsSemiDevils$data[[1]]$text,ragaex_strim)
context_picked
ragaex_strim <- "(?<=第一回)[...]+(?=第二回)"
context_picked <- str_extract_all(semiGodsSemiDevils$data[[1]]$text,ragaex_strim)
context_picked
knitr::opts_chunk$set(echo = TRUE)
T <- "釋名第一回　青衫磊落險<U+5CEF>行第二回　玉壁月華明第三回　馬疾香幽第四回　崖高人遠第五回　微步縠紋生第六回　誰"
T <- "釋名第一回　青衫磊落險<U+5CEF>行第二回　玉壁月華明第三回　馬疾香幽第四回　崖高人遠第五回　微步縠紋生第六回　誰"
A <- "(?>=第一回)[...]+(?=第二回)"
str_extract(T,A)
A <- "(?>=第一回)(?=第二回)"
str_extract(T,A)
A <- "(?>=第一回)[青衫](?=第二回)"
str_extract(T,A)
A <- "(?>=第一回)[青衫](?=第二回)"
H <- str_extract(T,A)
H
A <- "(?>=第一回)[青衫](?=第二回)"
H <- str_view(T,A)
H
A <- "(?>=第一回)(..|..|...)+(?=第二回)"
H <- str_view(T,A)
H
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
print(regex_pattern)
year <-
westernYear <- as.integer(year)+1911
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "(..|..|...)+"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "(?<=市)(..|..|...)+"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "(?<=市)(..|..|...)+(?=區)"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "(?<=市)(..|..|...)+(?=區)區"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
ragaex_strim <- "第一回(?<=第一回)[...]+(?=第二回)"
context_picked <- str_extract_all(semiGodsSemiDevils$data[[1]]$text,ragaex_strim)
context_picked
semiGodsSemiDevils$data[[1]]$text[[3]]
semiGodsSemiDevils$data[[1]]$text[[4]]
ragaex_strim <- "第一回(?<=第一回)[...]+(?=第二回)"
context_picked <- semiGodsSemiDevils$data[[1]]$text[[3]]
context_picked
mention_duan <- str_extract_all(semiGodsSemiDevils$data[[1]]$text,"段譽|段兄|段兄弟|段大哥|段相公|段君|及姓段的小子")
mention_duan
mention_duan <- str_extract_all(context_picked_split,"段譽|段兄|段兄弟|段大哥|段相公|段君|及姓段的小子")
textExample <- c("段1......。　　段2....。")
ragaex_strim <- "第一回(?<=第一回)[...]+(?=第二回)"
context_picked <- semiGodsSemiDevils$data[[1]]$text[[3]]
context_picked
context_picked_split <- str_extract(context_picked,(..|..|...)+)
cut <- "(..|..|...)+"
context_picked_split <- str_extract(context_picked,cut)
# context_picked_split
cut <- "(..|..|...)+"
context_picked_split <- str_extract(context_picked,cut)
context_picked_split
mention_duan <- str_extract_all(context_picked_split,"段譽|段兄|段兄弟|段大哥|段相公|段君|及姓段的小子")
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
str(context_picked_split)
context_picked_split <- `str_split(string, pattern)`
context_picked_split <- str_split(context_picked,pattern)
str(context_picked_split)
#context_picked_split
context_picked_split <- str_split(context_picked,textExample)
str(context_picked_split)
#context_picked_split
context_picked_split <- str_split(context_picked,textExample)
str(context_picked_split)
#context_picked_split
textExample <- c("段1......。　　段2....。")
context_picked_split <- str_split(context_picked,textExample)
str(context_picked_split)
#context_picked_split
cut <- "(?<=  )(..|..|...)(?=  )"
context_picked_split <- str_split(context_picked,cut)
str(context_picked_split)
#context_picked_split
cut <- "(?<=  )(..|..|...)(?=  )"
addresses <- c(
'臺  中市后里區公館里尾社路  385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "cut <- "(?<=  )(..|..|...)(?=  )"
addresses <- c(
'臺  中市后里區公館里尾社路  385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "(?<=  )(..|..|...)(?=  )"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
addresses <- c(
'臺  中市后里區公館里尾社路  385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "(?<=  )(..|..|...)(?=  )"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
cut <- "(?<=  )(..|..|...)(?=  )"
context_picked_split <- str_split(context_picked,cut)
pattern <- paste0("段(兄|兄弟)",back_regex )
str_extract_all(twoNames, pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
back_regex <- "段兄(?!弟)"
#back_regex <- "段兄[^弟]"
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex )
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex )
twoNames, patter)
pattern <- paste0("段(兄|兄弟)",back_regex )
pattern
paste0(1,2)
cut <- "(?<=  )(..|..|...)(?=  )"
context_picked_split <- str_split(context_picked,"  ")
str(context_picked_split)
#context_picked_split
cut <- "(?<=  )(..|..|...)(?=  )"
context_picked_split <- str_split(context_picked,"  ")
str(context_picked_split)
context_picked_split
cut <- "(?<=  )(..|..|...)(?=  )"
context_picked_split <- str_split(context_picked,"\\s")
str(context_picked_split)
context_picked_split
str(context_picked_split)
table_duan <- table(unlist(mention_duan))
table_duan
View(context_picked_split)
context_picked_split <- str_split(context_picked,"\\s")
str(context_picked_split)
context_picked_split
context_picked_split <- str_split(context_picked,"\\s\\s")
str(context_picked_split)
context_picked_split
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
library(stringr)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
levels(factor2)
sort(
str_sub(char2,1,1)
str_sub(char2,1,1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
Sys.getlocale("LC_COLLATE")
Sys.getlocale("LC_COLLATE")
Sys.getlocale("LC_COLLATE")
Sys.getlocale("LC_COLLATE")
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
View(covid19)
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,c("4","5-9","10-14","15-19","20-24","25-29","30-34","35-39","40-44","45-49" ,"50-54","55-59" ,"60-64","65-69","70+"),
ordered=TRUE
)
covid19$年齡層
levels(covid19$年齡層)
covid19$縣市 <- factor(covid19$縣市,c( "台中市" "台北市"))
covid19$縣市 <- factor(covid19$縣市,c( "台中市","台北市"))
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
levels(covid19$縣市) # 是名稱字串向量
levels(covid19$縣市) # 是名稱字串向量
levels(covid19$縣市) # 是名稱字串向量
table(covid19$確定病例數)
table(covid19$確定病例數)
table(covid19$縣市)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
table(covid19$縣市)
View(covid19)
newLevels <- names(population)
