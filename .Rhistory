# map在單維度遞迴時，.x也可以只寫.
map(1:5, ~{sampleData[[.]][[1]]})
# 串接寫法(I): external dispatch
sampleData[[1]] %>% {.[[1]]}
sampleData[[2]] %>% {.[[1]]}
sampleData[[3]] %>% {.[[1]]}
map(sampleData, ~{.x[[1]]})
# 串接寫法(II): internal dispatch
1 %>% {sampleData[[.]][[1]]}
2 %>% {sampleData[[.]][[1]]}
3 %>% {sampleData[[.]][[1]]}
map(1:4, ~{sampleData[[.x]][[1]]})
# map在單維度遞迴時，.x也可以只寫.
map(1:5, ~{sampleData[[.]][[1]]})
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"缺考"
}
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else(grade_i < 60 ) {
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else(grade_i < 60 ) {
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else {
"F"
}
} else {
"缺考"
}
grade <- c(45, 74, NA)
i<-2
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else {
"F"
}
} else {
"缺考"
}
grade <- c(45, 74, NA)
i<-1
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else {
"F"
}
} else {
"缺考"
}
pass_or_fail <- function(grade_i){
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"缺考"
}
}
pass_or_fail(grade[[1]])
pass_or_fail(grade[[2]])
pass_or_fail(grade[[3]])
# 可否直接input整個grade vector
warning("不是vectorised function")
pass_or_fail(grade)
grade[[1]] %>% {pass_or_fail(.)}
grade[[2]] %>% {pass_or_fail(.)}
grade[[3]] %>% {pass_or_fail(.)}
map(grade, ~{pass_or_fail(.)}) # map to list
map_chr(grade, ~{pass_or_fail(.)}) # map to atom. vectof of class character
map_pass_fail <- function(grade){
map_chr(grade, ~{pass_or_fail(.)})
}
map_pass_fail(grade)
map_pass_fail(c(77,43,68,NA))
eggs <- rep("雞蛋x1",10)
ham <- rep("火腿x1", 10)
toast <- rep("土司2片",10)
toast_withEggHam <- function(toast=NULL, egg=NULL, ham=NULL){
if(is.null(toast) || !str_detect(toast, "土司")){stop("少了土司")}
if(is.null(egg) || !str_detect(egg, "蛋")){stop("少了蛋")}
if(is.null(ham) || !str_detect(ham, "火腿")){stop("少了火腿")}
"火腿蛋三明治"
}
# 土司、火腿、蛋 第一份出列
1 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}
# 土司、火腿、蛋 第二份出列
2 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}
# 土司、火腿、蛋 第三份出列
3 %>% {toast_withEggHam(toast=toast[[.]], egg=eggs[[.]], ham=ham[[.]])}
map(1:10,
~toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]))
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
# 100學年 1年級
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])
# 101學年 2年級
acadYear_i <- academicYears[[2]]
grade_i <- allGrades[[2]]
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])
# 102學年 3年級
acadYear_i <- academicYears[[3]]
grade_i <- allGrades[[3]]
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])
# 103學年 4年級
acadYear_i <- academicYears[[4]]
grade_i <- allGrades[[4]]
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
unique(courseStructure$科目名稱[pick])
output <- vector("{type}", length={len})
### 前置作業
entranceYear <- 100
major <- "經濟系"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
get_courses <- function(acadYear_i, grade_i, courseStructure){
pick <-
(courseStructure$學年==acadYear_i
&
str_detect(courseStructure$應修系級, grade_i))
return(
unique(courseStructure$科目名稱[pick])
)
}
# 前置作業，接map iteration
map(1:4,
~{
get_courses(academicYears[[.x]],
allGrades[[.x]],
courseStructure)})
eggs <- rep("雞蛋x1",10)
ham <- rep("火腿x1", 10)
toast <- rep("土司2片",10)
toast_withEggHam <- function(toast=NULL, egg=NULL, ham=NULL){
if(is.null(toast) || !str_detect(toast, "土司")){stop("少了土司")}
if(is.null(egg) || !str_detect(egg, "蛋")){stop("少了蛋")}
if(is.null(ham) || !str_detect(ham, "火腿")){stop("少了火腿")}
"火腿蛋三明治"
}
map(1:10,
~toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]))
output <- vector("character", 10)
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
output <- vector("character", 10)
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
sum <- 0
for(.x in 1:10){
sum <- sum+a[[.x]]
}
a <- sample(1:100, 10, replace=T)
print(a)
sum <- 0
for(.x in 1:10){
sum <- sum+a[[.x]]
}
print(sum)
output <- c()
for(.x in 1:10){
new <- sample(0:100,1)
if(new %% 3==0){
output <- c(output, new)
}
}
print(output)
list(
list("student A", c(2,3,4,5)),
list("student B", NA), # 沒交作業
list("student C", factor(c(2,3,4,5))),
list("student D", factor(c(2,3,5)))
) -> collectionHWs
correctAns <- factor(c(2,3,4,5))
output <- vector("integer",length(collectionHWs))
nameVector <- vector("character", length(collectionHWs))
for(.x in seq_along(collectionHWs)){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
# 改題部份
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}
}
names(output) <- nameVector
print(output)
list(
list("student A", c(2,3,4,5)),
list("student B", NA), # 沒交作業
list("student C", factor(c(2,3,4,5))),
list("student D", factor(c(2,3,5)))
) -> collectionHWs
correctAns <- factor(c(2,3,4,5))
output <- vector("integer",length(collectionHWs))
nameVector <- vector("character", length(collectionHWs))
for(.x in seq_along(collectionHWs)){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
# 改題部份
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}
}
names(output) <- nameVector
print(output)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate); library(jsonlite)
fromJSON("https://data.ntpc.gov.tw/api/datasets/C3FFC733-C2E3-42C6-9C14-CDDDDF3D2AEC/json/preview") -> ntpc_building_info
View(ntpc_building_info)
str_extract_all(ntpc_building_info,"停車場")
sp
str_extract_all(ntpc_building_info,"停車場") -> sp
str_extract_all(ntpc_building_info,"停車場") -> sp
str_extract_all(ntpc_building_info,"停車場") -> sp
str_extract_all(ntpc_building_info,"停車場") -> a
str(ntpc_building_info)
str_extract_all(ntpc_building_info$name,"停車場")
regex <- "[:graph:]+停車場$"
str_extract_all(ntpc_building_info$name,regex)
str_extract_all(ntpc_building_info$name,regex) -> sp
sp
map(1:4,~{sp[[.x]]})
sp1 -> ntpc_building_parking
str(ntpc_building_info)
regex <- "[:graph:]+停車場$"
str_extract_all(ntpc_building_info$name,regex) -> sp
sp1 <- map(1:4,~{sp[[.x]]})
sp1 -> ntpc_building_parking
ntpc_building_parking
str(ntpc_building_parking)
sum <- 0
for(i in 1:10){
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
print(glue::glue("已擲{i}次得到{sum}次正面"))
}
sum <- 0
for(i in 1:100){
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
print(glue::glue("已擲{i}次得到{sum}次正面"))
if(sum==5){
break
}
}
no_found(kw){
no_found <- function(kw){
regex11 <- "kw"
if(str_detect( ntpc_building_info$name,regex11,negate=T)){
warning("No Found")
}
}
# no_found
no_found
dv
no_found <- function(kw){
regex11 <- "kw"
if(str_detect( ntpc_building_info$name,regex11,negate=T)){
warning("No Found")
}
return(warning("No Found"))
}
no_found
fff
ff
no_found(dd)
no_found(話務中心)
no_found("話務中心")
no_found("話務中心")
no_found <- function(kw){
regex11 <- "kw"
if(str_detect( ntpc_building_info$name,regex11,negate=T)){
warning("No Found")
}
}
no_found("話務中心")
sum <- 0
for(i in 1:100){
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
print(glue::glue("已擲{i}次得到{sum}次正面"))
if(sum==5){
break
}
}
sum <- 0
count <- 0 # 計數器
while(sum<5){
count <- count+1 # 計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
print(glue::glue("已擲{count}次得到{sum}次正面"))
}
no_found("話務中心")
regex11 <- "kw"
no_found(話務中心)
regex11 <- kw
kw <- "話務中心"
no_found <- function(kw){
regex11 <- kw
if(str_detect( ntpc_building_info$name,regex11,negate=T)){
warning("No Found")
}
}
no_found <- function(kw){
regex11 <- kw
if(str_detect( ntpc_building_info$name,regex11,negate=T)){
warning("No Found")
}
}
kw <- "話務中心"
no_found <- function(kw){
regex11 <- kw
if(str_detect( ntpc_building_info$name,regex11,negate=T)){
warning("No Found")
}
}
no_found("話務中心")
regex11 <- kw
regex11
if(str_detect( ntpc_building_info$name,regex11,negate=T)){
warning("No Found")
}
str_detect( ntpc_building_info$name,regex11,negate=T)
if(str_detect( ntpc_building_info$name,regex11,negate=F)){
warning("No Found")
}
str_detect( ntpc_building_info$name,regex11,negate=F)
kw <- "話務中"
no_found <- function(kw){
regex11 <- kw
regex11
if(str_detect( ntpc_building_info$name,regex11,negate=F)){
warning("No Found")
}
}
no_found("話務中心")
no_found("話務中")
no_found <- function(kw){
regex11 <- kw
if(str_detect( ntpc_building_info$name,regex11,negate=T)){
warning("No Found")
}
}
no_found <- function(kw){
regex11 <- kw
regex11
if(str_detect( ntpc_building_info$name,regex11,negate=T)){
warning("No Found")
}
}
no_found("話務中")
no_found("話務中心")
str_detect( ntpc_building_info$name,regex11,negate=T)
str_detect( ntpc_building_info$name,regex11)
no_found <- function(kw){
regex11 <- kw
regex11
if(str_extract( ntpc_building_info$name,regex11)==regex11){
warning("No Found")
}
}
no_found("話務中心")
no_found <- function(kw){
regex11 <- kw
regex11
if(str_extract( ntpc_building_info$name,regex11) == regex11){
warning("No Found")
}
}
no_found("話務中心")
str_extract( ntpc_building_info$name,regex11) == regex11
str_extract( ntpc_building_info$name,regex11)
re <- str_extract( ntpc_building_info$name,regex11)
if( re == regex11){
warning("No Found")
}
no_found <- function(kw){
regex11 <- kw
re <- str_extract( ntpc_building_info$name,regex11)
if( re == regex11){
warning("No Found")
}
}
no_found("話務中心")
c <- c(a,aj)
c <- c(1,2)
c==1
re <- str_extract(ntpc_building_info$name,regex11)
no_found <- function(kw){
regex11 <- kw
re <- str_extract(ntpc_building_info$name,regex11)
if(re == kw){
warning("No Found")
}
}
c <- c(1,2)
c==1
no_found("話務中心")
no_found <- function(kw){
regex11 <- kw
re <- str_extract(ntpc_building_info$name,regex11)
if(re == kw){
warning("No Found")
}
}
no_found("話務中心")
set.seed(1000) # 控制sample抽出的數字sequence固定，通常進行方法比對用
output <- c()
for(.x in 1:10){
new <- sample(0:100,1)
if(new %% 3==0){
output <- c(output, new)
}
}
print(output)
set.seed(1000) # 控制sample抽出的數字sequence固定，通常進行方法比對用
count <- 0 # 計數器起始值
output <- c()
while(count <= 10){ # 計數上限條件
count <- count+1 # 計數器+1
new <- sample(0:100,1)
if(new %% 3==0){
output <- c(output, new)
}
}
print(output)
count <- 0 # 計數器起始值
sum <- 0
while(count <= 10){ # 計數上限條件
count <- count+1 # 計數器+1
sum <- sum+a[[count]]
}
