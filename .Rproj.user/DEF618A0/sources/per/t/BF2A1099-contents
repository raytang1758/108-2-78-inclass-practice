---
title: '0513'
author: "tr"
date: "2020/5/13"
output: html_document
---
```{r}
char1 <- c("Wild","Apple","Donald","May","Avocada") 
factor1 <- factor(char1)
library(stringr)
levels(factor1)
```
```{r}
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭") 
factor2 <- factor(char2)
levels(factor2)

sort(
  str_sub(char2,1,1)
)
sort(
  str_sub(char2,2,2)
)
```
```{r}
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
```

```{r}
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <- 
  factor(covid19$縣市)
covid19$性別 <-
  factor(covid19$性別)
covid19$是否為境外移入 <-
  factor(
    covid19$是否為境外移入
  )
```

```{r}
# 可排序類別資料：年齡層
covid19$年齡層 <-
  factor(
    covid19$年齡層,c("4","5-9","10-14","15-19","20-24","25-29","30-34","35-39","40-44","45-49" ,"50-54","55-59" ,"60-64","65-69","70+"),
    ordered=TRUE
  )

```
```{r}
# 可排序類別資料：年齡層
covid19$年齡層 <-
  factor(
    covid19$年齡層,
    ordered=TRUE
  )
```

```{r}
jsonlite::fromJSON(
  "https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population

```
```{r}
newLevels <- names(population)
newLevels
```
```{r}
levels(covid19$縣市) # 是名稱字串向量

# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
```
```{r}
levels(covid19$年齡層)
```
```{r}
str(covid19$年齡層)
level_names <- levels(covid19$年齡層)
level_names
startingAges <- stringr::str_extract(
  level_names,
  "^[0-9]+" # regex：開頭的一串數字
)
startingAges
```
```{r}
factor1 <- factor(
  c("A","A","C","A","D","F","D","D")
)
factor1

levels(factor1)[[1]] <- "Excellent"
levels(factor1)[[2]] <- c("e")
factor1
factor1
```
```{r}
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
```
```{r}
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
```

```{r}
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
```
```{r}
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
```
```{r}
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)

# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
  "嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"

currentLevels <- str_replace(currentLevels, 
            north_regex, "北部")
currentLevels <- str_replace(currentLevels, 
            middle_regex, "中部")
currentLevels <- str_replace(currentLevels, 
            south_regex, "南部")
newLevels <- str_replace(currentLevels, 
            east_regex, "東部")


levels(covid19$地區) <- newLevels
covid19$地區
```
```{r}
levels(covid19$年齡層)

# 創造10歲間距的所有可能
start <- seq(5, 55, by=10)
start
end <- seq(14, 64, by=10)
middleLevels <- 
  rep(
    paste0(start,"-",end), 
    each=3) # 每個新間距要2個
middleLevels 
newLevels <- c("4", middleLevels, "65+", "65+")

levels(covid19$年齡層) <- newLevels
covid19$年齡層
```


```{r}
factor2 <- 
  factor(c("好","好","普通","普通", "好"))
levels(factor2)
```
```{r}
factor2 <- 
  factor(c("好","好","普通","普通", "好"))
levels(factor2)

# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
```
```{r}
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)

# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
```

```{r}
factor1[4:6] <- factor2
factor1
```
```{r}
forcats::fct_c(factor1, factor2)
```


```{r}
a <- factor(covid19$性別)
levels(a) <- c("male","female")
levels(a)
```

```{r}
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") ->
  garbageRoutes
```

```{r}
a <- "[A-Z]路線|[A-Z][0-9]+路線|[金山][0-9]路線"
str_extract(garbageRoutes$linename,a) -> b
b <- factor(b)
levels(b) -> c
garbageRoutes[[route]] <- names(c)
```



```{r}
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
```


```{r}
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")

str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元 
str_count(headline, "[謝陳官]")

str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組 
str_count(headline, "謝無雙|官求敗")

str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
```

