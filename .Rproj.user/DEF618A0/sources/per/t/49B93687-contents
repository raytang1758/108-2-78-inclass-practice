---
title: '0520'
author: "tr"
date: "2020/5/20"
output: html_document
---

```{r}
install.packages("purrr")
```
```{r}
example <- list(
  name=c("小明","小花","小新","美美"),
  height=c(175,166,170,160),
  weight=c(77,NA,60,43),
  birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
  hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
  residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
  allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
  bloodType=c("A","B","B","O")
)
```

```{r}
library(purrr)
```

```{r}
map(example, ~.x[pick_小新]) -> 
  data_selected 
  
data_selected
```


```{r}
pick_小新 <- example$name == "小新"
str(pick_小新)
data_selected <- 
  list(
    name=example$name[pick_小新],
    weight=example$weight[pick_小新],
    height=example$height[pick_小新],
    hobby=example$hobby[pick_小新],
    residence=example$residence[pick_小新],
    allowance=example$allowance[pick_小新],
    bloodType=example$bloodType[pick_小新]
  )
names(data_selected)

```
```{r}
jsonlite::fromJSON("https://cloud.culture.tw/frontsite/trans/SearchShowAction.do?method=doFindTypeJ&category=3", simplifyDataFrame = F) -> dance
```

```{r}
str(dance[[5]]$showInfo)
map(dance, ~.x$title) ->
  list_titles

View(list_titles)
```
```{r}
map(dance,~.x$showInfo) ->
  list_numberOfShows 
  
View(list_numberOfShows)
```
```{r}
# 這個表演第1個場次的訊息
dance[[5]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[5]]$showInfo[[2]]$time
```

```{r}
map(dance[[5]]$showInfo, ~ .x$time) ->
  
list_showTimes_dance5
```
```{r}
map(dance,~.x$showInfo$time) -> time
time
map(dance[[8]]$showInfo,~.x$location) -> location
```

```{r}
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
  weather_next36hours
```

```{r}
map(weather_next36hours$cwbopendata$dataset$location$locationName,~.x)
```
```{r}
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$elementName 
```
```{r}
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/67BB3C2B-E7D1-43A7-B872-61B2F082E11B?$format=json", simplifyDataFrame = F) ->
  busRoutes
map(busRoutes, ~.x$Id) ->Id
map(busRoutes, ~.x$providerId) -> pId
map(busRoutes, ~.x$providerName) -> name
map(busRoutes, ~.x$nameZh) -> nZ
```

```{r}
starttime <- map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
endtime <- map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$endTime)
highesttemp <- map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$parameter$parameterValue)
```


```{r}
threeHeigths <- c(Gary=178, John=182, Cam=175)
```
```{r}
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights

# 把排好的人名取出
names(sorted_heights) -> sorted_persons

# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
```

```{r}
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
```
```{r}
library(magrittr)
```

```{r}
sort(threeHeigths, decreasing=T) %>% 
names(.) %>%
.[[1]] -> highestPerson
c(1,4,3) -> a
sort(a , decreasing=T) -> c
c
```
```{r}
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
```

```{r}
library(stringr)
region <- cities

# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
```

```{r}
levels(region) %>% 
  str_replace(.,"台北","北部") %>%
  str_replace(.,"花蓮|台東","東部") %>%
  str_replace(.,"台中","中部") %>%
  levels(.)
```
```{r}
num <- c(2,97,22,15,7)

# 選出大於50的數字
(num > 50) -> pick_big
num[pick_big]
(num > 50) %>%
  num[.]
```

```{r}
threeHeights %>%
  .sort(., decreasing=T) %>%
  names(.) %>%
  .[[1]] -> highestPerson
```
```{r}
levels(region) %>% 
  str_replace("台北","北部") %>%
  str_replace("花蓮|台東","東部") %>%
  str_replace("台中","中部") -> 
  levels(region)
```

```{r}
# 資料
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")

population %>% 
  names(sort(.)) %>%
  factor(cities, levels=.) -> cities
```

```{r}
population %>%
  sort(.) %>%
  names(.) %>%
  factor(cities, levels=.) -> cities
```
```{r}
population %>% 
  {names(sort(.))} %>%
  factor(cities, levels=.) -> cities
```

```{r}
dataList <- list(
  num=c(2,97,22,15,7),
  chr=c("2","97","22","15","7")
)
```
```{r}
library(purrr)
map(dataList, is.numeric) -> results
unlist(results) -> pick_numeric

dataList[pick_numeric] -> num_element
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
map(dataList, is.numeric) %>%
unlist(.) %>%

dataList[.] %>%
{(.[[1]] > 50)} %>%
num_element[[1]][.] -> bigNumber
```
```{r}

```


```{r}
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19

jsonlite::fromJSON(
  "https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
```

```{r}
factor(covid19$縣市)%>%
levels(.) %>%
{population[.]} %>%
{sort(., decreasing=T)} ->

population

newLevels <- names(population)
newLevels

covid19$縣市 <-
  factor(
    covid19$縣市, levels=newLevels
  )

levels(covid19$縣市)
```

